<?php

namespace Anorgan\QueryLanguage\Parser;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-20 at 23:24:02.
 */
class QueryLexerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var QueryLexer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new QueryLexer;
    }

    /**
     * @covers \Anorgan\QueryLanguage\Parser\QueryLexer::getType
     */
    public function testFloatToken()
    {
        $this->assertTrue($this->object->isA('3.5', QueryLexer::T_FLOAT));
    }

    /**
     * @covers \Anorgan\QueryLanguage\Parser\QueryLexer::getType
     */
    public function testIntegerToken()
    {
        $this->assertTrue($this->object->isA('342', QueryLexer::T_INTEGER));
    }

    /**
     * @covers \Anorgan\QueryLanguage\Parser\QueryLexer::getType
     */
    public function testDoubleQuoteToken()
    {
        $this->assertTrue($this->object->isA('"', QueryLexer::T_DOUBLE_QUOTE));
    }

    /**
     * @covers \Anorgan\QueryLanguage\Parser\QueryLexer::getType
     */
    public function testSingleQuoteToken()
    {
        $this->assertTrue($this->object->isA("'", QueryLexer::T_SINGLE_QUOTE));
    }

    /**
     * @covers \Anorgan\QueryLanguage\Parser\QueryLexer::getType
     */
    public function testOpenParenthesisToken()
    {
        $this->assertTrue($this->object->isA("(", QueryLexer::T_OPEN_PARENTHESIS));
    }

    /**
     * @covers \Anorgan\QueryLanguage\Parser\QueryLexer::getType
     */
    public function testCloseParenthesisToken()
    {
        $this->assertTrue($this->object->isA(")", QueryLexer::T_CLOSE_PARENTHESIS));
    }

    /**
     * @covers \Anorgan\QueryLanguage\Parser\QueryLexer::getType
     */
    public function testDotToken()
    {
        $this->assertTrue($this->object->isA(".", QueryLexer::T_DOT));
    }

    /**
     * @covers \Anorgan\QueryLanguage\Parser\QueryLexer::getType
     */
    public function testNotToken()
    {
        $this->assertTrue($this->object->isA("!", QueryLexer::T_NOT));
    }

    /**
     * @covers \Anorgan\QueryLanguage\Parser\QueryLexer::getType
     */
    public function testEqualToken()
    {
        $this->assertTrue($this->object->isA("=", QueryLexer::T_EQUAL));
    }

    /**
     * @covers \Anorgan\QueryLanguage\Parser\QueryLexer::getType
     */
    public function testGreaterToken()
    {
        $this->assertTrue($this->object->isA(">", QueryLexer::T_GREATER));
    }

    /**
     * @covers \Anorgan\QueryLanguage\Parser\QueryLexer::getType
     */
    public function testLowerToken()
    {
        $this->assertTrue($this->object->isA("<", QueryLexer::T_LOWER));
    }

    /**
     * @covers \Anorgan\QueryLanguage\Parser\QueryLexer::getType
     */
    public function testAndToken()
    {
        $this->assertTrue($this->object->isA("AND", QueryLexer::T_AND));
    }

    /**
     * @covers \Anorgan\QueryLanguage\Parser\QueryLexer::getType
     */
    public function testOrToken()
    {
        $this->assertTrue($this->object->isA("OR", QueryLexer::T_OR));
    }

    /**
     * @covers \Anorgan\QueryLanguage\Parser\QueryLexer::getType
     */
    public function testStringToken()
    {
        $this->assertTrue($this->object->isA("some string", QueryLexer::T_STRING));
    }

    /**
     * @covers \Anorgan\QueryLanguage\Parser\QueryLexer::getType
     */
    public function testStringTokenForQuotedString()
    {
        $this->assertTrue($this->object->isA('"some quoted string"', QueryLexer::T_STRING));
    }
    
    /**
     * 
     * @param string $input
     * @param array $expectedTokens
     * 
     * @dataProvider dataProviderLexerTokens
     */
    public function testLexerTokens($input, $expectedTokens)
    {
        $this->object->setInput($input);
        $this->object->moveNext();
        foreach ($expectedTokens as $tokenValue) {
            $this->object->moveNext();
            $this->assertEquals($tokenValue, $this->object->token['value']);
        }

        $this->assertFalse($this->object->moveNext());
    }
    
    /**
     * Data provider for testLexerTokens
     *
     * @return array
     */
    public function dataProviderLexerTokens()
    {
        $data = [];

        $data['simple query'] = [
            'input'     => 'a=b',
            'tokens'    => [
                'a',
                '=',
                'b'
            ]
        ];

        $data['simple query, longer variables'] = [
            'input'     => 'field:value',
            'tokens'    => [
                'field',
                ':',
                'value'
            ]
        ];

        $data['simple query, >= operator and spaces'] = [
            'input'     => 'field >= value',
            'tokens'    => [
                'field',
                '>',
                '=',
                'value'
            ]
        ];

        $data['simple query, != operator and quotes'] = [
            'input'     => 'field != "value with space"',
            'tokens'    => [
                'field',
                '!',
                '=',
                '"',
                'value',
                'with',
                'space',
                '"',
            ]
        ];

        $data['simple query, namespaced field'] = [
            'input'     => 'some.namespaced.field != "value with space"',
            'tokens'    => [
                'some.namespaced.field',
                '!',
                '=',
                '"',
                'value',
                'with',
                'space',
                '"',
            ]
        ];

        $data['complex query'] = [
            'input'     => 'field: value AND is_active != 1',
            'tokens'    => [
                'field',
                ':',
                'value',
                'AND',
                'is_active',
                '!',
                '=',
                '1',
            ]
        ];

        $data['complex query, composites'] = [
            'input'     => '(field: value AND is_active != 1) OR (field != "quoted string" AND is_active = 1)',
            'tokens'    => [
                '(',
                'field',
                ':',
                'value',
                'AND',
                'is_active',
                '!',
                '=',
                '1',
                ')',
                
                'OR',
                
                '(',
                'field',
                '!',
                '=',
                '"',
                'quoted',
                'string',
                '"',
                'AND',
                'is_active',
                '=',
                '1',
                ')',
            ]
        ];

        return $data;
    }
}
