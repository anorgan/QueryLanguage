<?php

namespace Anorgan\QueryLanguage;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-19 at 23:39:09.
 */
class CompositeTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Composite
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Composite(Composite::TYPE_AND);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }
    
    /**
     * @covers Anorgan\QueryLanguage\Composite::__construct
     * @covers Anorgan\QueryLanguage\Composite::getType
     * @covers Anorgan\QueryLanguage\Composite::count
     * @covers Anorgan\QueryLanguage\Composite::add
     */
    public function testSettingParamsViaConstructor()
    {
        $this->object->add(new Condition('field', '=', 'value'));
        $composite = new Composite(Composite::TYPE_OR, $this->object, $this->object);
        $this->assertEquals('OR', $composite->getType());
        $this->assertTrue($composite->hasParent());
        $this->assertEquals(1, $composite->count());
        $composite->add(new Condition('field', '=', 'value'));
        $this->assertEquals(2, $composite->count());
        
        $composite = new Composite(Composite::TYPE_OR, [$this->object], $this->object);
        $this->assertEquals(1, $composite->count());
    }
    
    /**
     * @covers Anorgan\QueryLanguage\Composite::back
     */
    public function testBack()
    {
        $this->assertSame($this->object, $this->object->back());
        $this->assertSame($this->object, $this->object->back()->back()->back());

        $composite = new Composite(Composite::TYPE_OR, [], $this->object);
        $this->assertSame($this->object, $this->object->back());
        
        $secondComposite = new Composite(Composite::TYPE_AND, [], $composite);
        $this->assertSame($composite, $secondComposite->back());
        $this->assertSame($this->object, $secondComposite->back()->back());
    }
    
    /**
     * @covers Anorgan\QueryLanguage\Composite::hasParent
     */
    public function testHasParent()
    {
        $this->assertFalse($this->object->hasParent());
        $composite = new Composite(Composite::TYPE_OR, [], $this->object);
        $this->assertTrue($composite->hasParent());
    }

    /**
     * @covers Anorgan\QueryLanguage\Composite::end
     */
    public function testEnd()
    {
        $this->assertSame($this->object, $this->object->end());
        
        $composite = new Composite(Composite::TYPE_OR, [], $this->object);
        $secondComposite = new Composite(Composite::TYPE_AND, [], $composite);
        $this->assertSame($this->object, $secondComposite->end());
    }

    /**
     * @covers Anorgan\QueryLanguage\Composite::addParts
     */
    public function testAddParts()
    {
        $this->assertEquals(0, $this->object->count());
        $this->object->addParts([
            new Composite(Composite::TYPE_AND, [new Condition('field', '=', 'value')]),
        ]);
        $this->assertEquals(1, $this->object->count());
        $this->object->addParts([
            new Composite(Composite::TYPE_OR, [new Condition('field', '=', 'value')]),
            new Condition('field', '=', 'value')
        ]);
        $this->assertEquals(3, $this->object->count());
    }

    /**
     * @covers Anorgan\QueryLanguage\Composite::add
     */
    public function testAdd()
    {
        $this->assertEquals(0, $this->object->count());

        $this->object->add(new Composite(Composite::TYPE_OR, [new Condition('field', '=', 'value')]));
        $this->object->add(new Condition('field', '=', 'value'));

        $this->assertEquals(2, $this->object->count());
    }

    /**
     * @covers Anorgan\QueryLanguage\Composite::add
     * @expectedException \InvalidArgumentException
     */
    public function testThrowsExceptionIfWrongArgumentPassedToAdd()
    {
        $this->object->add('a');
    }

    /**
     * @covers Anorgan\QueryLanguage\Composite::add
     */
    public function testAddingEmptyCompositionDoesNothing()
    {
        $this->assertEquals(0, $this->object->count());

        $this->object->add(new Composite('OR'));
        $this->assertEquals(0, $this->object->count());

        $this->object->add(new Condition('field', '=', 'value'));
        $this->assertEquals(1, $this->object->count());

    }

    /**
     * @covers Anorgan\QueryLanguage\Composite::andX
     */
    public function testAndX()
    {
        $condition = new Condition('field', '=', 'value');
        $composite = $this->object->andX($condition);
        
        $this->assertEquals(1, $this->object->count());
        $this->assertEquals(Composite::TYPE_AND, $composite->getType());
        $this->assertSame($this->object, $composite->back());
    }

    /**
     * @covers Anorgan\QueryLanguage\Composite::orX
     */
    public function testOrX()
    {
        $condition = new Condition('field', '=', 'value');
        $composite = $this->object->orX($condition);
        
        $this->assertEquals(1, $this->object->count());
        $this->assertEquals(Composite::TYPE_OR, $composite->getType());
        $this->assertSame($this->object, $composite->back());
    }


    /**
     * @covers Anorgan\QueryLanguage\Composite::count
     */
    public function testCount()
    {
        $this->assertEquals(0, $this->object->count());
        $this->object->addParts([
            new Condition('field', '=', 'value'),
        ]);
        $this->assertEquals(1, $this->object->count());
    }

    /**
     * @covers Anorgan\QueryLanguage\Composite::__toString
     */
    public function testToString()
    {
        $this->assertEquals('', (string) $this->object);

        $conditionA = new Condition('field', '=', 'value');
        $conditionB = new Condition('another_field', '>', 'another value');

        $this->object->add($conditionA);
        $this->assertEquals('field=value', (string) $this->object);

        $this->object->add($conditionB);
        $this->assertEquals('(field=value) AND (another_field>another value)', (string) $this->object);

        $composite = new Composite(Composite::TYPE_OR, [$conditionA, $conditionB]);
        $this->assertEquals('(field=value) OR (another_field>another value)', (string) $composite);

        $composite = new Composite(Composite::TYPE_OR, [$conditionA, $conditionB, $this->object]);
        $this->assertEquals('(field=value) OR (another_field>another value) OR ((field=value) AND (another_field>another value))', (string) $composite);
    }

    /**
     * @covers Anorgan\QueryLanguage\Composite::toArray
     */
    public function testToArray()
    {
        $this->assertEmpty($this->object->toArray());
        
        $condition = new Condition('field', '=', 'value');
        $this->object->add($condition);
        $this->assertEquals($condition, $this->object->toArray());
        
        $condition2 = new Condition('field', '=', 'value');
        $this->object->add($condition2);
        $this->assertEquals([$condition, $condition2], $this->object->toArray());
    }

    /**
     * @covers Anorgan\QueryLanguage\Composite::getType
     */
    public function testGetType()
    {
        $composite = new Composite(Composite::TYPE_AND);
        $this->assertEquals('AND', $composite->getType());
        
        $composite = new Composite(Composite::TYPE_OR);
        $this->assertEquals('OR', $composite->getType());
    }

}
