<?php

namespace Anorgan\QueryLanguage;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-17 at 01:06:44.
 */
class ConditionTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Condition
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Condition('field', '=', 'value');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    
    /**
     * @covers Anorgan\QueryLanguage\Condition::__construct
     */
    public function testSettingValueViaContructorNormalizesIt()
    {
        $condition = new Condition('field', '=', 'value');
        $this->assertEquals('value', $condition->toArray()['value']);
        $condition = new Condition('field', '=', '[1,2,3]');
        $this->assertEquals([1,2,3], $condition->toArray()['value']);
    }
    
    /**
     * @covers Anorgan\QueryLanguage\Condition::normalizeValue
     */
    public function testNormalizeValueDoesNothingIfValueIsNotString()
    {
        $date = new \DateTime;
        $this->assertEquals($date, $this->object->normalizeValue($date));
    }
    
    /**
     * @covers Anorgan\QueryLanguage\Condition::normalizeValue
     */
    public function testNormalizeValueConvertsJsonToArray()
    {
        $condition = new Condition('field', '=', '[1, "test", null]');
        $parts = $condition->toArray();
        $this->assertEquals(array(1, 'test', null), $parts['value']);
    }

    /**
     * @covers Anorgan\QueryLanguage\Condition::denormalizeValue
     */
    public function testDenormalizeValue()
    {
        $condition = new Condition('field', '=', '[1,2,3]');
        $this->assertEquals('[1,2,3]', $condition->denormalizeValue([1,2,3]));
        $condition = new Condition('field', '=', '[1,2,3]');
        $this->assertEquals('test', $condition->denormalizeValue('test'));
    }

    /**
     * @covers Anorgan\QueryLanguage\Condition::toArray
     */
    public function testToArray()
    {
        $condition = new Condition('field', '=', '[1,2,3]');
        $this->assertEquals([
            'field'     => 'field', 
            'operator'  => '=',
            'value'     => [1,2,3]
        ], $condition->toArray());
    }

    /**
     * @covers Anorgan\QueryLanguage\Condition::__toString
     */
    public function test__toString()
    {
        $condition = new Condition('field', '=', '[1,2,3]');
        $this->assertEquals('field=[1,2,3]', (string) $condition);
    }

}
