<?php

namespace Anorgan\QueryLanguage;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-20 at 23:00:20.
 */
class QueryTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Query
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Query;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Anorgan\QueryLanguage\Query::__construct
     */
    public function testSettingConditionsViaConstructor()
    {
        $conditionA = new Condition('field', '=', 'value');
        $conditionB = new Condition('another_field', '<', 'value');
        $query = new Query([$conditionA, $conditionB]);
        
        $this->assertCount(2, $query->getConditions());
        
        $this->assertContains($conditionA, $query->getConditions());
        $this->assertContains($conditionB, $query->getConditions());
    }

    /**
     * @covers Anorgan\QueryLanguage\Query::getIterator
     */
    public function testGetIterator()
    {
        $this->assertInstanceOf('\ArrayIterator', $this->object->getIterator());
    }

    /**
     * @covers Anorgan\QueryLanguage\Query::add
     * @covers Anorgan\QueryLanguage\Query::getConditions
     */
    public function testAddAndGetConditions()
    {
        $this->assertEmpty($this->object->getConditions());
        
        $conditionA = new Condition('field', '=', 'value');
        $conditionB = new Condition('another_field', '<', 'value');
        
        $this->object->add($conditionA);
        $this->assertCount(1, $this->object->getConditions());
        
        $this->object->add($conditionB);
        $this->assertCount(2, $this->object->getConditions());
        
        $this->assertContains($conditionA, $this->object->getConditions());
        $this->assertContains($conditionB, $this->object->getConditions());
    }
    
    /**
     * @covers Anorgan\QueryLanguage\Query::add
     * @expectedException \InvalidArgumentException
     */
    public function testThrowsExceptionIfWrongArgumentPassedToAdd()
    {
        $this->object->add('a');
    }

    /**
     * @covers Anorgan\QueryLanguage\Query::create
     * @covers Anorgan\QueryLanguage\Query::andX
     */
    public function testCreateAndAndXProduceSameObject()
    {
        $this->assertEquals(Query::create(), Query::andX());
    }

    /**
     * @covers Anorgan\QueryLanguage\Query::andX
     */
    public function testAndX()
    {
        $conditionA = new Condition('field', '=', 'value');
        $conditionB = new Condition('another_field', '<', 'value');
        
        $composite = Query::andX([$conditionA, $conditionB]);
        $this->assertEquals('AND', $composite->getType());
        $this->assertCount(2, $composite);
    }

    /**
     * @covers Anorgan\QueryLanguage\Query::orX
     */
    public function testOrX()
    {
        $conditionA = new Condition('field', '=', 'value');
        $conditionB = new Condition('another_field', '<', 'value');
        
        $composite = Query::orX([$conditionA, $conditionB]);
        $this->assertEquals('OR', $composite->getType());
        $this->assertCount(2, $composite);
    }

}
